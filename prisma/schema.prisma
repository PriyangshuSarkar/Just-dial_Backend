generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserSubscription {
  id          String    @id @default(uuid())
  name        String
  description String?
  price       Float
  duration    Int // Duration in days
  features    String[]
  users       User[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model User {
  id                  String            @id @default(uuid())
  name                String
  email               String            @unique
  password            String
  salt                String
  isVerified          Boolean           @default(false)
  phone               String?
  hideDetails         Boolean           @default(true)
  otp                 String?
  otpExpiresAt        DateTime?
  avatar              String?
  addressId           String?           @unique
  address             Address?          @relation("UserAddress")
  reviews             Review[]
  bookings            Booking[]
  subscriptionId      String?
  subscription        UserSubscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionExpire  DateTime?
  paymentVerification Boolean?          @default(false)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  deletedAt           DateTime?
}

model BusinessSubscription {
  id          String     @id @default(uuid())
  name        String
  description String?
  price       Float
  duration    Int // Duration in days
  features    String[]
  businesses  Business[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
}

model Business {
  id                  String                @id @default(uuid())
  name                String
  email               String                @unique
  password            String
  salt                String
  isVerified          Boolean               @default(false)
  phone               String?
  type                String?
  website             String?
  otp                 String?
  otpExpiresAt        DateTime?
  companyLogo         String?
  companyImages       String[]
  latitude            Float?
  longitude           Float?
  addressId           String?               @unique
  address             Address?              @relation("BusinessAddress")
  services            Service[]
  reviews             Review[]
  averageRating       Float?
  subscriptionId      String?
  subscription        BusinessSubscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionExpire  DateTime?
  paymentVerification Boolean?              @default(false)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  deletedAt           DateTime?
}

model Admin {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Service {
  id              String      @id @default(uuid())
  name            String
  overview        String?
  price           Float
  discountedPrice Float?
  serviceImages   String[]
  businessId      String
  business        Business    @relation(fields: [businessId], references: [id])
  subcategoryId   String
  subcategory     Subcategory @relation(fields: [subcategoryId], references: [id])
  tags            Tag[]
  facilities      Facility[]
  bookings        Booking[]
  offers          Offer[]
  reviews         Review[]
  averageRating   Float?
  addressId       String?     @unique
  address         Address?    @relation("ServiceAddress")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  deletedAt       DateTime?
}

model Address {
  id         String    @id @default(uuid())
  street     Street[]
  city       City[]
  state      State[]
  country    Country[]
  pincode    Pincode[]
  userId     String?   @unique
  user       User?     @relation("UserAddress", fields: [userId], references: [id])
  businessId String?   @unique
  business   Business? @relation("BusinessAddress", fields: [businessId], references: [id])
  serviceId  String?   @unique
  service    Service?  @relation("ServiceAddress", fields: [serviceId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model Street {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  address Address[]
}

model City {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  address Address[]
}

model State {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  address Address[]
}

model Country {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  address Address[]
}

model Pincode {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  address Address[]
}

model Category {
  id            String        @id @default(uuid())
  name          String        @unique
  subcategories Subcategory[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
}

model Subcategory {
  id         String    @id @default(uuid())
  name       String    @unique
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id])
  services   Service[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
  serviceId String
  service   Service   @relation(fields: [serviceId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Facility {
  id        String    @id @default(uuid())
  name      String    @unique
  serviceId String
  service   Service   @relation(fields: [serviceId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Review {
  id         String    @id @default(uuid())
  rating     Int
  comment    String?
  serviceId  String
  service    Service   @relation(fields: [serviceId], references: [id])
  businessId String?
  business   Business? @relation(fields: [businessId], references: [id])
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model Booking {
  id        String    @id @default(uuid())
  date      DateTime
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  serviceId String
  service   Service   @relation(fields: [serviceId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Offer {
  id           String    @id @default(uuid())
  title        String
  description  String?
  discountRate Float
  startDate    DateTime
  endDate      DateTime
  serviceId    String
  service      Service   @relation(fields: [serviceId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
}
