generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ContactType {
  EMAIL
  PHONE
}

model UserSubscription {
  id          String    @id @default(uuid())
  name        String
  description String?
  price       Float
  duration    Int
  features    String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  users       User[]
}

model User {
  id                  String            @id @default(uuid())
  name                String
  slug                String?           @unique
  password            String?
  salt                String?
  contacts            UserContact[]
  hideDetails         Boolean           @default(true)
  avatar              String?
  subscriptionId      String?
  subscriptionExpire  DateTime?
  paymentVerification Boolean           @default(false)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  deletedAt           DateTime?
  addresses           UserAddress[]
  bookings            Booking[]
  chats               Chat[]
  reviews             Review[]
  subscription        UserSubscription? @relation(fields: [subscriptionId], references: [id])

  @@index([subscriptionId])
}

model UserContact {
  id           String      @id @default(uuid())
  userId       String
  type         ContactType
  value        String      @unique
  isVerified   Boolean     @default(false)
  isPrimary    Boolean     @default(false)
  order        Int?
  verifiedAt   DateTime?
  otp          String?
  otpExpiresAt DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  deletedAt    DateTime?
  user         User        @relation(fields: [userId], references: [id])

  @@unique([userId, type, isPrimary])
  @@index([type])
  @@index([value])
  @@index([userId])
}

model UserAddress {
  id        String    @id @default(uuid())
  userId    String
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  order     Int?
  street    String
  city      String
  country   String
  pincode   String
  state     String
}

model BusinessSubscription {
  id          String       @id @default(uuid())
  name        String
  description String?
  type        BusinessType
  price       Float
  duration    Int
  features    String[]
  tierLevel   Int          @default(1)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  businesses  Business[]
}

enum BusinessType {
  INDIVIDUAL
  FIRM
}

model Business {
  id                          String                        @id @default(uuid())
  name                        String?
  slug                        String?                       @unique
  primaryContacts             BusinessPrimaryContact[]
  additionalContacts          String[]
  password                    String?
  salt                        String?
  isBusinessVerified          Boolean                       @default(false)
  type                        BusinessType                  @default(INDIVIDUAL)
  subscriptionId              String?
  subscriptionExpire          DateTime?
  subscription                BusinessSubscription?         @relation(fields: [subscriptionId], references: [id])
  averageRating               Float?
  reviewCount                 Int                           @default(0)
  isListed                    Boolean                       @default(false)
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  deletedAt                   DateTime?
  paymentVerification         Boolean                       @default(false)
  chats                       Chat[]
  bookings                    Booking[]
  reviews                     Review[]
  businessSupportingDocuments BusinessSupportingDocuments[]
  businessDetails             BusinessDetails?
  price                       Float?

  @@index([name])
  @@index([isListed])
  @@index([averageRating])
  @@index([isBusinessVerified])
  @@index([reviewCount])
  @@index([subscriptionId])
}

model BusinessPrimaryContact {
  id           String      @id @default(uuid())
  businessId   String
  type         ContactType
  value        String      @unique
  isVerified   Boolean     @default(false)
  isPrimary    Boolean     @default(false)
  order        Int?
  verifiedAt   DateTime?
  otp          String?
  otpExpiresAt DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  deletedAt    DateTime?
  business     Business    @relation(fields: [businessId], references: [id])

  @@unique([businessId, type, isPrimary])
  @@index([type])
  @@index([value])
}

model BusinessAddress {
  id                String           @id @default(uuid())
  businessDetailsId String?
  createdAt         DateTime         @default(now())
  deletedAt         DateTime?
  updatedAt         DateTime         @updatedAt
  businessDetails   BusinessDetails? @relation(fields: [businessDetailsId], references: [id])
  order             Int?
  street            String
  city              String
  country           String
  pincode           String
  state             String
}

model BusinessDetails {
  id                 String            @id
  business           Business          @relation(fields: [id], references: [id])
  registrationNumber String?
  license            String?
  experience         Int?
  teamSize           Int?
  description        String?
  websites           BusinessWebsite[]
  images             BusinessImage[]
  latitude           Float?
  longitude          Float?
  degree             String[]
  language           Language[]
  proficiency        Proficiency[]
  court              Court[]
  gstNumber          String?
  categoryId         String?
  category           Category?         @relation(fields: [categoryId], references: [id])
  tags               Tag[]
  addresses          BusinessAddress[]
  logo               String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  deletedAt          DateTime?

  @@index([categoryId])
}

model BusinessSupportingDocuments {
  id         String    @id @default(uuid())
  businessId String
  type       String
  url        String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  business   Business  @relation(fields: [businessId], references: [id])
}

model BusinessImage {
  id                String           @id @default(uuid())
  url               String
  order             Int?
  createdAt         DateTime         @default(now())
  deletedAt         DateTime?
  updatedAt         DateTime         @updatedAt
  businessDetailsId String?
  businessDetails   BusinessDetails? @relation(fields: [businessDetailsId], references: [id])
}

model BusinessWebsite {
  id                String           @id @default(uuid())
  type              String
  url               String
  createdAt         DateTime         @default(now())
  deletedAt         DateTime?
  updatedAt         DateTime         @updatedAt
  businessDetailsId String?
  businessDetails   BusinessDetails? @relation(fields: [businessDetailsId], references: [id])
}

model Language {
  id              String            @id @default(uuid())
  name            String            @unique
  slug            String?           @unique
  createdAt       DateTime          @default(now())
  deletedAt       DateTime?
  updatedAt       DateTime          @updatedAt
  businessDetails BusinessDetails[]
}

model Proficiency {
  id              String            @id @default(uuid())
  name            String            @unique
  slug            String?           @unique
  createdAt       DateTime          @default(now())
  deletedAt       DateTime?
  updatedAt       DateTime          @updatedAt
  businessDetails BusinessDetails[]
}

model Court {
  id              String            @id @default(uuid())
  name            String            @unique
  slug            String?           @unique
  createdAt       DateTime          @default(now())
  deletedAt       DateTime?
  updatedAt       DateTime          @updatedAt
  businessDetails BusinessDetails[]
}

model Admin {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Category {
  id                String            @id @default(uuid())
  name              String
  slug              String?           @unique
  createdAt         DateTime          @default(now())
  deletedAt         DateTime?
  categoryImage     String?
  updatedAt         DateTime          @updatedAt
  businessesDetails BusinessDetails[]
}

model Tag {
  id              String            @id @default(uuid())
  name            String            @unique
  createdAt       DateTime          @default(now())
  deletedAt       DateTime?
  updatedAt       DateTime          @updatedAt
  BusinessDetails BusinessDetails[]
}

model Review {
  id         String    @id @default(uuid())
  rating     Int
  comment    String?
  businessId String?
  userId     String
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
  updatedAt  DateTime  @updatedAt
  business   Business? @relation(fields: [businessId], references: [id])
  user       User?     @relation(fields: [userId], references: [id])
}

model Booking {
  id         String    @id @default(uuid())
  date       DateTime
  userId     String
  businessId String
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
  updatedAt  DateTime  @updatedAt
  business   Business  @relation(fields: [businessId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

model Chat {
  id         String    @id @default(uuid())
  userId     String
  businessId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  deletedAt  DateTime?
  Business   Business  @relation(fields: [businessId], references: [id])
  User       User      @relation(fields: [userId], references: [id])
  Message    Message[]

  @@unique([userId, businessId])
}

model Message {
  id         String     @id @default(uuid())
  content    String
  senderType SenderType
  chatId     String
  createdAt  DateTime   @default(now())
  readAt     DateTime?
  fileType   String?
  fileUrl    String?
  chats      Chat       @relation(fields: [chatId], references: [id])
}

enum SenderType {
  USER
  BUSINESS
}

model Pincode {
  id     String  @id @default(uuid())
  code   String  @unique
  slug   String? @unique
  cityId String
  city   City    @relation(fields: [cityId], references: [id])
}

model City {
  id       String    @id @default(uuid())
  name     String
  slug     String?   @unique
  stateId  String
  state    State     @relation(fields: [stateId], references: [id])
  pincodes Pincode[]
}

model State {
  id        String  @id @default(uuid())
  name      String
  slug      String? @unique
  countryId String
  country   Country @relation(fields: [countryId], references: [id])
  cities    City[]
}

model Country {
  id    String  @id @default(uuid())
  name  String
  slug  String? @unique
  state State[]
}
