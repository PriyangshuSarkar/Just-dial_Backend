generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ContactType {
  EMAIL
  PHONE
}

model UserSubscription {
  id          String    @id @default(uuid())
  name        String
  description String?
  price       Float
  duration    Int
  features    String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  users       User[]
}

model User {
  id                  String            @id @default(uuid())
  name                String
  slug                String?           @unique
  password            String
  salt                String
  contacts            UserContact[]
  hideDetails         Boolean           @default(true)
  otp                 String?
  otpExpiresAt        DateTime?
  avatar              String?
  addressId           String?           @unique
  subscriptionId      String?
  subscriptionExpire  DateTime?
  paymentVerification Boolean?          @default(false)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  deletedAt           DateTime?
  address             Address?
  bookings            Booking[]
  chats               Chat[]
  reviews             Review[]
  subscription        UserSubscription? @relation(fields: [subscriptionId], references: [id])
}

model UserContact {
  id           String      @id @default(uuid())
  userId       String
  type         ContactType
  value        String      @unique
  isVerified   Boolean     @default(false)
  isPrimary    Boolean     @default(false)
  verifiedAt   DateTime?
  otp          String?
  otpExpiresAt DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  deletedAt    DateTime?
  user         User        @relation(fields: [userId], references: [id])

  @@unique([userId, type, isPrimary])
  @@index([type])
  @@index([value])
}

model BusinessSubscription {
  id          String       @id @default(uuid())
  name        String
  description String?
  type        BusinessType
  price       Float
  duration    Int
  features    String[]
  tierLevel   Int          @default(1)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  businesses  Business[]
}

model Business {
  id                  String                @id @default(uuid())
  name                String
  slug                String?               @unique
  contacts            BusinessContact[]
  password            String
  salt                String
  isBusinessVerified  Boolean               @default(false)
  type                BusinessType
  description         String?
  website             String?
  otp                 String?
  otpExpiresAt        DateTime?
  companyLogo         String?
  companyImages       String[]
  latitude            Float?
  longitude           Float?
  addressId           String?               @unique
  subscriptionId      String?
  subscriptionExpire  DateTime?
  averageRating       Float?
  reviewCount         Int                   @default(0)
  isListed            Boolean               @default(false)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  deletedAt           DateTime?
  paymentVerification Boolean?              @default(false)
  gstNumber           String?
  licenceNumber       String?
  address             Address?
  subscription        BusinessSubscription? @relation(fields: [subscriptionId], references: [id])
  chats               Chat[]
  reviews             Review[]
  services            Service[]

  @@index([name])
  @@index([isListed])
  @@index([averageRating])
  @@index([isBusinessVerified])
  @@index([reviewCount])
}

model BusinessContact {
  id           String      @id @default(uuid())
  businessId   String
  type         ContactType
  value        String      @unique
  isVerified   Boolean     @default(false)
  isPrimary    Boolean     @default(false)
  verifiedAt   DateTime?
  otp          String?
  otpExpiresAt DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  deletedAt    DateTime?
  business     Business    @relation(fields: [businessId], references: [id])

  @@unique([businessId, type, isPrimary])
  @@index([type])
  @@index([value])
}

model Admin {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Service {
  id              String      @id @default(uuid())
  name            String
  slug            String?     @unique
  overview        String?
  price           Float
  discountedPrice Float?
  businessId      String
  subcategoryId   String
  averageRating   Float?
  description     String?
  reviewCount     Int         @default(0)
  addressId       String?     @unique
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  deletedAt       DateTime?
  isListed        Boolean     @default(false)
  serviceImages   String[]
  address         Address?
  bookings        Booking[]
  offers          Offer[]
  reviews         Review[]
  business        Business    @relation(fields: [businessId], references: [id])
  subcategory     Subcategory @relation(fields: [subcategoryId], references: [id])
  facilities      Facility[]  @relation("FacilityToService")
  tags            Tag[]       @relation("ServiceToTag")

  @@index([name])
  @@index([isListed])
  @@index([averageRating])
  @@index([price])
  @@index([updatedAt])
  @@index([reviewCount])
}

model Address {
  id         String    @id @default(uuid())
  userId     String?   @unique
  businessId String?   @unique
  serviceId  String?   @unique
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
  updatedAt  DateTime  @updatedAt
  business   Business? @relation(fields: [businessId], references: [id])
  service    Service?  @relation(fields: [serviceId], references: [id])
  user       User?     @relation(fields: [userId], references: [id])
  street     String
  city       String
  country    String
  pincode    String
  state      String
}

model Pincode {
  id     String  @id @default(uuid())
  code   String  @unique
  slug   String? @unique
  cityId String
  city   City    @relation(fields: [cityId], references: [id])
}

model City {
  id       String    @id @default(uuid())
  name     String
  slug     String?   @unique
  stateId  String
  state    State     @relation(fields: [stateId], references: [id])
  pincodes Pincode[]
}

model State {
  id        String  @id @default(uuid())
  name      String
  slug      String? @unique
  countryId String
  country   Country @relation(fields: [countryId], references: [id])
  cities    City[]
}

model Country {
  id    String  @id @default(uuid())
  name  String
  slug  String? @unique
  state State[]
}

model Category {
  id            String        @id @default(uuid())
  name          String        @unique
  slug          String?       @unique
  createdAt     DateTime      @default(now())
  deletedAt     DateTime?
  categoryImage String?
  updatedAt     DateTime      @updatedAt
  subcategories Subcategory[]
}

model Subcategory {
  id               String    @id @default(uuid())
  name             String    @unique
  slug             String?   @unique
  categoryId       String
  createdAt        DateTime  @default(now())
  deletedAt        DateTime?
  updatedAt        DateTime  @updatedAt
  subcategoryImage String?
  services         Service[]
  category         Category  @relation(fields: [categoryId], references: [id])
}

model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  updatedAt DateTime  @updatedAt
  services  Service[] @relation("ServiceToTag")
}

model Facility {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  updatedAt DateTime  @updatedAt
  services  Service[] @relation("FacilityToService")
}

model Review {
  id         String    @id @default(uuid())
  rating     Int
  comment    String?
  serviceId  String
  businessId String?
  userId     String
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
  updatedAt  DateTime  @updatedAt
  business   Business? @relation(fields: [businessId], references: [id])
  service    Service?  @relation(fields: [serviceId], references: [id])
  user       User?     @relation(fields: [userId], references: [id])
}

model Booking {
  id        String    @id @default(uuid())
  date      DateTime
  userId    String
  serviceId String
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  updatedAt DateTime  @updatedAt
  service   Service   @relation(fields: [serviceId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model Offer {
  id           String    @id @default(uuid())
  title        String
  description  String?
  discountRate Float
  startDate    DateTime
  endDate      DateTime
  serviceId    String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  service      Service   @relation(fields: [serviceId], references: [id])
}

model Chat {
  id         String    @id @default(uuid())
  userId     String
  businessId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  deletedAt  DateTime?
  Business   Business  @relation(fields: [businessId], references: [id])
  User       User      @relation(fields: [userId], references: [id])
  Message    Message[]

  @@unique([userId, businessId])
}

model Message {
  id         String     @id @default(uuid())
  content    String
  senderType SenderType
  chatId     String
  createdAt  DateTime   @default(now())
  readAt     DateTime?
  fileType   String?
  fileUrl    String?
  chats      Chat       @relation(fields: [chatId], references: [id])
}

enum SenderType {
  USER
  BUSINESS
}

enum BusinessType {
  INDIVIDUAL
  FIRM
}
